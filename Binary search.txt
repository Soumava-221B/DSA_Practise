// "static void main" must be defined in a public class.
public class Main {
    public static void main(String[] args) {     //m
        int[] arr = {1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 10, 11};
        int idx = bs(arr, 6);
        int fidx = fi(arr, 5);
        int lidx = li(arr, 5);
        int iidx = insert(arr , 9);
        int cidx = ceil(arr, 9);
        int flidx = floor(arr, 9);
        int sqrt = helper(10);
        int[][] mat = {{0, 1, 1}, {1, 1, 1}, {0, 0, 0}, {0, 0, 1}};
        int rowNumber = findRowNumber(mat);
        int[][] m = {{10, 20, 30}, // ------> sorted
                     {40, 50, 60}, //------->       6   r = 6 / 3 = 2  6%3 =0 
                     {70, 80, 90}}//8  
                                    // 0   1   2   3   4   5   6   7,  8   -> i
                                    //{10, 20, 30, 40, 50, 60, 70, 80, 90} -> v
        int isPresent = searchIn2DMatrix(m, 8);
    }
    public static int bs(int[] arr, int tar) {
        int lo = 0, hi = arr.length, ans = -1;
        while(lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if(arr[mid] == target) {
                ans = mid;
            }else if(arr[mid] > target) {
                hi = mid - 1;
            }else {
                lo = mid + 1;
            }
        }
        return ans;
    }
    public static int fi(int[] arr, int tar) {
        int lo = 0, hi = arr.length, ans = -1;
        while(lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if(arr[mid] == target) {
                ans = mid;
                hi = mid - 1;
            }else if(arr[mid] > target) {
                hi = mid - 1;
            }else {
                lo = mid + 1;
            }
        }
        return ans;
    }
    public static int li(int[] arr, int tar) {
        int lo = 0, hi = arr.length, ans = -1;
        while(lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if(arr[mid] == target) {
                ans = mid;
                lo = mid + 1;
            }else if(arr[mid] > target) {
                hi = mid - 1;
            }else {
                lo = mid + 1;
            }
        }
        return ans;
    }
    public static int insert(int[] arr, int tar) {
        if(bs(arr, tar) != -1) {
            return fi(arr, tar);
        }else {
            return ceil(arr, tar);
        }
    }
    public static int ceil(int[] arr, int tar) {
        int lo = 0, hi = arr.length, ans = -1;
        while(lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if(arr[mid] < tar) {
                lo = mid + 1;
            }else {// >= tar
                ans = mid;//possible ceil (smallest in all bigger value)
                hi = mid - 1;
            }
        }
        return ans;
    }
    public static int floor(int[] arr, int tar) {
        int lo = 0, hi = arr.length, ans = -1;
        while(lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if(arr[mid] > tar) {
                hi = mid - 1;
            }else {//<=tar
                ans = mid;
                lo = mid + 1;
            }
        }
        return ans;
    }
    public static int sqrt(int tar) {
        int lo = 1, hi = arr.length, ans = -1;
        while(lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if(mid * mid > tar) {
                hi = mid - 1;
            }else {//mid * mid <= tar
                ans = mid;//possible
                lo = mid + 1;//if something more nearer possible
            }
        }
        return ans;
    }
    public static int findRowNumber(int[][] mat) {
        int maxOnes = 0;
        int ansRow = -1;
        for(int i = 0; i < n; i++) {
            int[] cRow = mat[i];
            int fidx = fi(cRow, 1);//2        cofones = crow.length - fi
            if(fidx != -1) {//{0, 0, 1, 1, 1}
                int count = cRow.length - fi;
                if(count > maxOnes){
                    maxOnes = count;
                    ansRow = i;
                }
            }
        }
        return ansRow;
    }
    public static int searchIn2DMatrix(int[][] mat, int tar) {
        int lo = 0, hi = mat.length * mat[0].length - 1, ans = -1;
        while(lo <= hi) {//lo = 0, hi = 8// mid = 4   1  1
            int mid = lo + (hi - lo) / 2;
            int val = mat[mid / mat[0].length][mid % mat[0].length];
            if(val == target) {
                ans = mid;
            }else if(val > target) {
                hi = mid - 1;
            }else {
                lo = mid + 1;
            }
        }
        return ans;
    }
}
//10^9  10^9
/*
1 2 3 4 5 6 7 8 9 10
    l h
    m
    a
  3*3 <= 10
        5 * 5 > 10
10 is what? 10 is the smallest value greater than 9
for(int i = 1; i <= n; i++) {
for(int j = 1; j <= i; j++) {

}
}
1 -> 1
2 -> 2
3 -> 3
..
N = N
1 + 2 + 3 + 4 + ....n= 

//r,c -> given 2d
//idx = r * colLength + c; -> 1D converted

//idx -> given 1D
r = idx / colLength
c = id % colLength;