public boolean groupSum(int start, int[] nums, int target) {
  
}
/*
call(1);
call(2);
call(3);

fun(int n) {
  for(int i = 1; i <= 3; i++) {
    fun(i);
  }
}
[2, 3, 5, 7]
if(idx == arr.length || tar == 0) {
  return tar == 0;
}
                               f(0, 7)
                    f(1, 5)               f(1, 7)
              f(2, 2)    f(2, 5)    f(2, 4)        f(2, 7)
              
              
              f(2, 2)
      f(3, -3)      f(3, 2)
      
      
      
              f(2, 5)
        f(3, 0)
        
        7 -> 2 inc   3 ex   5 inc
        
//Inclusion/Exclusion Principle
95% recursive questions
        [2, 2, 5, 7]
        [2, 2]
        [2, 5]
        [2, 5, 7]
        
        
  public static boolean isPossible(int[] arr, int idx, int tar) {//1
    if(tar < 0) {//2
      return false;//3
    }//4
    if(idx == arr.length || tar == 0) {//5
      return tar == 0;//6
    }//7
    boolean inc = isPossible(arr, idx + 1, tar - arr[idx]);//8
    
    boolean exc = isPossible(arr, idx + 1, tar);//9
    
    return inc || exc;//10
    
    
  }//11
  
  
  [2, 3, 5, 7]   tar = 9

  f(0, 9)
 line 1 -> f(0, 9)
 line 2 didn't work skip to line 5
 line 5 didn't work skip to 8
 line 8 -> f(1, 7);
 
           line 1 -> f(1, 7)
           line 2 didn't work skip to line 5
           line 5 didn't work skip to 8
           line 8 f(2, 4)
           
                  line 1 -> f(2, 4)
                  line 2 didn't work skip to line 5
                  line 5 didn't work skip to 8
                  line 8 f(3, -1)  //false;
                  line 9 f(3, 4)
                        
                         line 1 -> f(3, 4)
                         line 2 didn't work skip to line 5
                         line 5 didn't work skip to 8
                         line 8 f(4, -3)  //false;
                        
                        
                  
Permutations and Combinations
CNR

Combination -> order of elemetnts needed to be maintained
Permutation means -> arramgement matters

Every combination is a permutation but every permutation is not a combination.
       idx
[2, 3, 5, 7] -> arr
[5, 2, 3, 5] -> permutation

inc 5 -> go back to 2, include 2 -> go back to 2 -> exclude 2 -> include 3 -> go back to 2 -> exc 2 -> exc 3 -> include 5
5235


[1, 2, 3]
f(idx)
[2, 1, 3]
                            f(0), ""
                                  f(1), ""
                              f(0), "2"
                           f(0), "21"
                                f(1), "21"
                                      f(2), "21"
                                   f(0), "213"
                                        f(1)
                                              f(2)
                                                    f(3) -> arr.length  print 213
                                 
                                
                    
                    
[2, 5, 7] -> combination

[5 2 7] -> Permutation

//CNR
fun(int[] arr, int idx, int tar) {
  inc = fun(arr, idx + 1, tar - arr[idx])
  exc = fun(arr, idx + 1, tar);
}


//CR
//coin can neve be 0, 
fun(int[] arr, int idx, int tar) {
  inc = fun(arr, idx, tar - arr[idx])
  exc = fun(arr, idx + 1, tar);
}


//PR
fun(int[] arr, int idx, int tar) {
  inc = fun(arr, 0, tar - arr[idx])
  exc = fun(arr, idx + 1, tar);
}

//PNR

fun(int[] arr, int idx, int tar, boolean[] vis) {
  if(!vis[idx]) {
    vis[idx] = true;
    inc = fun(arr, 0, tar - arr[idx])
    vis[idx] = false;
  }
  exc = fun(arr, idx + 1, tar);
}

//Nothing -> rec -> CNR
//Nothing -> rep -> CR
//mention

https://github.com/rajneeshkumar146/pepcoding-Batches/blob/master/2019/levelUpAugBatch/lecture001Recursion/l002.java
read from line no 108   